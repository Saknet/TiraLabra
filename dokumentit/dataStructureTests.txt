
package datastructuretests;

import datastructures.ArrayList;
import datastructures.HashMap;
import huffmancoding.Node;
import huffmancoding.TreeBuilder;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.PriorityQueue;
import java.util.Random;

public class DataStructureTests {

    public static void main(String[] args) throws FileNotFoundException, IOException {
        final long startTime = System.currentTimeMillis();
        addFrequencies("testfiles/medium.txt");
        final long endTime = System.currentTimeMillis();
        System.out.println("Total execution time was:" + (endTime - startTime));
    }
    
    
    public static void arrayListReadme() throws FileNotFoundException, IOException {
        DataInputStream fis = new DataInputStream(new BufferedInputStream(new FileInputStream("testfiles/bible.txt")));
        ArrayList<Character> readmeList = new ArrayList<>();
        while (fis.available() > 0) {
            readmeList.add((char) fis.read());            
        }
        String s = "";
        for (int i  = 0; i < readmeList.size(); i++) {
            s = s + readmeList.get(i);
        }       
    }
    
    public static void arrayListMedium() throws FileNotFoundException, IOException {
        DataInputStream fis = new DataInputStream(new BufferedInputStream(new FileInputStream("testfiles/medium.txt")));
        ArrayList<Character> bible = new ArrayList<>();
        while (fis.available() > 0) {
            bible.add((char) fis.read());  
        }
        String s = "";
        for (int i  = 0; i < bible.size(); i++) {
            s = s + bible.get(i);
        }        
    }
    
    public static HashMap<Character, Integer> addFrequencies(String originalFile) throws IOException {
        Random rand = new Random();
        DataInputStream fis = new DataInputStream(new BufferedInputStream(new FileInputStream(originalFile)));
        HashMap<Character, Integer> frequencies = new HashMap<>(65536);
        while (fis.available() > 0) {
            char c = (char) fis.read();
            frequencies.put(c, rand.nextInt(Integer.MAX_VALUE)); 
            int n = frequencies.get(c);
        }
        fis.close();
        
        return frequencies;
    }  
    
    
    public static Node buildTree(PriorityQueue<Node> pq) {
        while (pq.size() > 1) {
            Node left = pq.poll();
            Node right = pq.poll();
            Node parent = new Node(left.getFrequency() + right.getFrequency(), left, right);
            pq.add(parent);
        }
        return pq.poll();
    }
}

